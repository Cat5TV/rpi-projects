#!/usr/bin/env python
# Code adapted from https://github.com/carolinedunn/facial_recognition

print("Please wait...")

from imutils import paths
import cv2, sys, face_recognition, pickle, os, random

try:
	person = sys.argv[1]
except:
	print("You need to specify a name. Usage: "+sys.argv[0]+" \"Name of User\"")
	quit()

mode = 0o755

path = "/home/pi/Documents/dataset/"
if not os.path.exists(path):
	os.mkdir(path,mode)
if not os.path.exists(path+person):
	os.mkdir(path+person,mode)

responses = ["Ooohlala!", "You beast.", "Sexy!", "I like the smile in this one.", "Cute!", "Why, hello there.", "You make me smile.", "Your eyes are gorgeous.", "Just a bit to the left...", "Are you winking at me?", "Lovely!", "Strike a pose."]

cam = cv2.VideoCapture(0)

cv2.namedWindow("Press space to take a photo, ESC when done", cv2.WINDOW_NORMAL)
cv2.resizeWindow("Press space to take a photo, ESC when done", 500, 300)

img_counter = len([name for name in os.listdir(path+person) if os.path.isfile(os.path.join(path+person, name))])

while True:
    ret, frame = cam.read()
    if not ret:
        print("Failed to grab frame")
        break
    cv2.imshow("Press space to take a photo, ESC when done", frame)

    k = cv2.waitKey(1)
    if k%256 == 27:
        # ESC pressed
        print("Closing...")
        break
    elif k%256 == 32:
        # SPACE pressed
        os.system(f'play -t mp3 {"sfx/camera_shutter.mp3"} > /dev/null 2>&1')
        img_name = path+person+"/image_{}.jpg".format(img_counter)
        cv2.imwrite(img_name, frame)
        print("{} written!".format(img_name)+" ... "+random.choice(responses))
        img_counter += 1

cam.release()

cv2.destroyAllWindows()

# our images are located in the dataset folder
print("[INFO] The AI is learning...")
imagePaths = list(paths.list_images(path))

# initialize the list of known encodings and known names
knownEncodings = []
knownNames = []

# loop over the image paths
for (i, imagePath) in enumerate(imagePaths):
	# extract the person name from the image path
	name = imagePath.split(os.path.sep)[-2]
	print("[INFO] Studying "+name+"'s facial features in image {}/{}".format(i + 1,len(imagePaths)))

	# load the input image and convert it from RGB (OpenCV ordering)
	# to dlib ordering (RGB)
	image = cv2.imread(imagePath)
	rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

	# detect the (x, y)-coordinates of the bounding boxes
	# corresponding to each face in the input image
	boxes = face_recognition.face_locations(rgb,
		model="hog")

	# compute the facial embedding for the face
	encodings = face_recognition.face_encodings(rgb, boxes)

	# loop over the encodings
	for encoding in encodings:
		# add each encoding + name to our set of known names and
		# encodings
		knownEncodings.append(encoding)
		knownNames.append(name)

# dump the facial encodings + names to disk
print("[INFO] Serializing encodings...")
data = {"encodings": knownEncodings, "names": knownNames}
f = open(path+"encodings.pickle", "wb")
f.write(pickle.dumps(data))
f.close()

print("Done.")
