#!/usr/bin/env python
# Code adapted from https://github.com/carolinedunn/facial_recognition

import os
import hashlib
import random

print("\nFacial Acquisition Response Technology v1.0")
print("By Robbie Ferguson")
print("https://Category5.TV\n")

# import the necessary packages
from imutils.video import VideoStream
from imutils.video import FPS
import face_recognition, imutils, pickle, time, cv2
from gtts import gTTS
from pathlib import Path

lang = "en"
tld = "com.au"
path = "/home/pi/Documents/dataset/"
greetings = ['Hello', 'Greetings', 'Salutations', 'Welcome back', 'Nice to see you']

Path(path+"audiocache").mkdir(parents=True, exist_ok=True)

def speak():
	hashobj = hashlib.md5(say.encode())
	hash = hashobj.hexdigest()
	filename = hash
	filename += '.mp3'
	cache = Path(path+"audiocache/"+filename)
	if cache.is_file():
#		print(f'Playing from cache...')
		os.system(f'play -t mp3 {path+"audiocache/"+filename} > /dev/null 2>&1')
	else:
#		print(f'Playing from API...')
		speech = gTTS(text=say, lang=lang, tld=tld)
		speech.save(path+"audiocache/"+filename)
		os.system(f'play -t mp3 {path+"audiocache/"+filename} > /dev/null 2>&1')

print(f'Please wait...')
say = "Welcome to FART"
speak()
os.system(f'play -t mp3 sfx/fart01.mp3 > /dev/null 2>&1')
say = "Facial Acquisition Response Technology. Please wait."
speak()

#Initialize 'currentname' to trigger only when a new person is identified.
currentname = "unknown"
#Determine faces from encodings.pickle file model created by adduser command.
encodingsP = path+"encodings.pickle"

#use this xml file
cascade = "frontalface.xml"

# load the known faces and embeddings along with OpenCV's Haar
# cascade for face detection
say = "Loading encodings & face detector."
print("[INFO] "+say)
speak()

picklefile = Path(encodingsP)
if picklefile.is_file():
	say = "Encodings found."
	print("[INFO] Encodings found.")
	speak()
else:
	say = "Encodings not found. Please read the fucking manual."
	print("[ERROR] Encodings not found.")
	speak()
	exit()

data = pickle.loads(open(encodingsP, "rb").read())
detector = cv2.CascadeClassifier(cascade)

# initialize the video stream and allow the camera sensor to warm up
say = "Starting video stream."
print("[INFO] "+say)
speak()
vs = VideoStream(src=0).start()
#vs = VideoStream(usePiCamera=True).start()
time.sleep(2.0)

# start the FPS counter
fps = FPS().start()

# loop over frames from the video file stream
while True:
	# grab the frame from the threaded video stream and resize it
	# to 500px (to speedup processing)
	frame = vs.read()
	frame = imutils.resize(frame, width=500)

	# convert the input frame from (1) BGR to grayscale (for face
	# detection) and (2) from BGR to RGB (for face recognition)
	gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
	rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

	# detect faces in the grayscale frame
	rects = detector.detectMultiScale(gray, scaleFactor=1.1,
		minNeighbors=5, minSize=(30, 30),
		flags=cv2.CASCADE_SCALE_IMAGE)

	# OpenCV returns bounding box coordinates in (x, y, w, h) order
	# but we need them in (top, right, bottom, left) order, so we
	# need to do a bit of reordering
	boxes = [(y, x + w, y + h, x) for (x, y, w, h) in rects]

	# compute the facial embeddings for each face bounding box
	encodings = face_recognition.face_encodings(rgb, boxes)
	names = []

	# loop over the facial embeddings
	for encoding in encodings:
		# attempt to match each face in the input image to our known
		# encodings
		matches = face_recognition.compare_faces(data["encodings"],
			encoding)
		name = "Unknown" #if face is not recognized, then print Unknown

		# check to see if we have found a match
		if True in matches:
			# find the indexes of all matched faces then initialize a
			# dictionary to count the total number of times each face
			# was matched
			matchedIdxs = [i for (i, b) in enumerate(matches) if b]
			counts = {}

			# loop over the matched indexes and maintain a count for
			# each recognized face face
			for i in matchedIdxs:
				name = data["names"][i]
				counts[name] = counts.get(name, 0) + 1

			# determine the recognized face with the largest number
			# of votes (note: in the event of an unlikely tie Python
			# will select first entry in the dictionary)
			name = max(counts, key=counts.get)

			#If someone in your dataset is identified, greet them
			if currentname != name:
				currentname = name
				say = random.choice(greetings)+" "+currentname+"."
				print("[INFO] Detected: "+currentname)
				speak()

		# update the list of names
		names.append(name)

	# loop over the recognized faces
	for ((top, right, bottom, left), name) in zip(boxes, names):
		# draw the predicted face name on the image - color is in BGR
		cv2.rectangle(frame, (left, top), (right, bottom),
			(0, 255, 225), 2)
		y = top - 15 if top - 15 > 15 else top + 15
		cv2.putText(frame, name, (left, y), cv2.FONT_HERSHEY_SIMPLEX,
			.8, (0, 255, 255), 2)

	# display the image to our screen
	cv2.imshow("Facial Recognition is Running", frame)
	key = cv2.waitKey(1) & 0xFF

	# quit when 'q' key is pressed
	if key == ord("q"):
		break

	# update the FPS counter
	fps.update()

# stop the timer and display FPS information
fps.stop()
print("[INFO] Elapsed time: {:.2f}".format(fps.elapsed()))
print("[INFO] ~FPS: {:.2f}".format(fps.fps()))

# do a bit of cleanup
cv2.destroyAllWindows()
vs.stop()
